@model El_Tringulito.Models.Promociones

@{
    ViewData["Title"] = "Crear Promoción";
}

<style>
    body {
        background: linear-gradient(to bottom, #000, #d4af37);
        font-family: 'Segoe UI', sans-serif;
        color: white;
    }

    .card {
        background-color: #1e1e1e;
        border: 1px solid #ffc107;
        border-radius: 12px;
        padding: 30px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5);
        margin: 40px auto;
        max-width: 700px;
    }

    h2 {
        color: #ffc107;
        margin-bottom: 25px;
        text-align: center;
    }

    label {
        color: #ffc107;
        font-weight: bold;
    }

    .form-control {
        background-color: #2c2c2c;
        color: white;
        border: 1px solid #ffc107;
        margin-bottom: 15px;
    }

        .form-control:focus {
            background-color: #1a1a1a;
            border-color: #f5c542;
            color: white;
        }

    .btn-success {
        background-color: #d4af37;
        border: none;
        font-weight: bold;
    }

        .btn-success:hover {
            background-color: #f0c94d;
            color: black;
        }

    .btn-secondary {
        background-color: #6c757d;
        border: none;
        font-weight: bold;
    }

    .text-danger {
        color: #ff6b6b;
    }

    .field-validation-error {
        color: #ff6b6b;
        font-size: 0.9em;
    }
</style>

<div class="card">
    <h2><i class="bi bi-plus-circle me-2"></i>Crear Promoción</h2>

    <form asp-action="Create" id="formPromocion">
        <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

        <div class="form-group">
            <label for="id_plato">Plato (opcional)</label>
            @Html.DropDownListFor(model => model.id_plato, ViewBag.Platos as SelectList, "-- Seleccionar plato --", new { @class = "form-control", @id = "id_plato" })
            <span asp-validation-for="id_plato" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label for="id_combo">Combo (opcional)</label>
            @Html.DropDownListFor(model => model.id_combo, ViewBag.Combos as SelectList, "-- Seleccionar combo --", new { @class = "form-control", @id = "id_combo" })
            <span asp-validation-for="id_combo" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="fecha_inicio"></label>
            <input asp-for="fecha_inicio" class="form-control" type="date" id="fecha_inicio" readonly />
            <span asp-validation-for="fecha_inicio" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="fecha_fin"></label>
            <input asp-for="fecha_fin" class="form-control" type="date" id="fecha_fin" required />
            <span asp-validation-for="fecha_fin" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label for="porcentaje_descuento">Descuento (%)</label>
            <input type="number" id="porcentaje_descuento" class="form-control" min="1" max="100" value="1" required />
            <span class="text-danger small" id="descuento-error" style="display:none;">El descuento debe ser mayor a 0 y menor o igual a 100.</span>
        </div>

        <input type="hidden" asp-for="precio" id="precio" />

        <div class="form-group">
            <label>Precio Final ($)</label>
            <input id="precio_display" class="form-control" readonly value="0.00" />
            <span asp-validation-for="precio" class="text-danger"></span>
        </div>

        <div class="form-group mt-4 d-flex justify-content-between">
            <input type="submit" value="Crear Promoción" class="btn btn-success w-50 me-2" />
            <a asp-action="Index" class="btn btn-secondary w-50">Cancelar</a>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        const preciosPlatos = @Html.Raw(Json.Serialize(ViewBag.PreciosPlatos));
        const preciosCombos = @Html.Raw(Json.Serialize(ViewBag.PreciosCombos));

        function actualizarPrecioFinal() {
            const platoId = document.getElementById("id_plato").value;
            const comboId = document.getElementById("id_combo").value;
            const descuento = parseFloat(document.getElementById("porcentaje_descuento").value || 0);

            const precioPlato = preciosPlatos[platoId] || 0;
            const precioCombo = preciosCombos[comboId] || 0;
            const total = precioPlato + precioCombo;
            const precioFinal = total - (total * (descuento / 100));

            document.getElementById("precio").value = precioFinal.toFixed(2);
            document.getElementById("precio_display").value = precioFinal.toFixed(2);
        }

        document.addEventListener("DOMContentLoaded", function () {
            const hoy = new Date().toISOString().split("T")[0];

            const fechaInicio = document.getElementById("fecha_inicio");
            if (fechaInicio) {
                fechaInicio.value = hoy;
                fechaInicio.readOnly = true;
            }

            const fechaFin = document.getElementById("fecha_fin");
            if (fechaFin) {
                fechaFin.setAttribute("min", hoy);
            }

            const descuentoInput = document.getElementById("porcentaje_descuento");
            descuentoInput.addEventListener("input", function () {
                const val = parseInt(this.value);
                document.getElementById("descuento-error").style.display = (isNaN(val) || val <= 0 || val > 100) ? "block" : "none";
                actualizarPrecioFinal();
            });

            document.getElementById("id_plato").addEventListener("change", actualizarPrecioFinal);
            document.getElementById("id_combo").addEventListener("change", actualizarPrecioFinal);

            document.getElementById("formPromocion").addEventListener("submit", function (e) {
                const plato = document.getElementById("id_plato").value;
                const combo = document.getElementById("id_combo").value;
                const fechaFinValue = document.getElementById("fecha_fin").value;
                const descuento = parseInt(document.getElementById("porcentaje_descuento").value);

                if (!plato && !combo) {
                    e.preventDefault();
                    alert("Debe seleccionar al menos un plato o un combo.");
                    return false;
                }

                if (fechaFinValue < hoy) {
                    e.preventDefault();
                    alert("La fecha de fin no puede ser anterior a hoy.");
                    return false;
                }

                if (isNaN(descuento) || descuento <= 0 || descuento > 100) {
                    e.preventDefault();
                    document.getElementById("descuento-error").style.display = "block";
                    return false;
                }

                return true;
            });

            actualizarPrecioFinal();
        });
    </script>

    @await Html.PartialAsync("_ValidationScriptsPartial")
}
